name: Build Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (e.g., 2)'
        required: true
        default: '2'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create keystore file
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > keystore.jks

      - name: Update version (if triggered manually)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Extract the current version code and name
          sed -i "s/versionCode = [0-9]*/versionCode = ${{ github.event.inputs.version_code }}/" app/build.gradle.kts
          sed -i "s/versionName = \"[^\"]*\"/versionName = \"${{ github.event.inputs.version_name }}\"/" app/build.gradle.kts

      - name: Build release APK
        run: ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version_name=${{ github.event.inputs.version_name }}" >> $GITHUB_OUTPUT
            echo "version_code=${{ github.event.inputs.version_code }}" >> $GITHUB_OUTPUT
          else
            VERSION_NAME=$(grep -oP 'versionName = "\K[^"]+' app/build.gradle.kts)
            VERSION_CODE=$(grep -oP 'versionCode = \K[0-9]+' app/build.gradle.kts)
            echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
            echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          fi

      - name: Rename APK
        run: |
          mkdir -p release
          cp app/build/outputs/apk/release/app-release.apk release/pogoauto-${{ steps.version.outputs.version_name }}.apk

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version_name }} (Build ${{ steps.version.outputs.version_code }})
          draft: false
          prerelease: false
          files: |
            release/pogoauto-${{ steps.version.outputs.version_name }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
