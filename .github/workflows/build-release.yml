name: Build Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (e.g., 2)'
        required: true
        default: '2'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Display Java, Gradle, and Android SDK versions
        run: |
          java -version
          javac -version
          echo "JAVA_HOME=$JAVA_HOME"
          ./gradlew --version
          echo "ANDROID_HOME=$ANDROID_HOME"
          ls -la $ANDROID_HOME/platforms

      - name: Create keystore file
        run: |
          # Create keystore file from base64-encoded secret
          # Make sure the secret doesn't have any line breaks or spaces
          echo "${{ secrets.RELEASE_KEYSTORE }}" > keystore.b64
          # Clean up the file to ensure it's valid base64
          tr -d '\n\r\t ' < keystore.b64 > keystore.clean.b64
          # Decode the base64 content
          base64 --decode keystore.clean.b64 > keystore.jks
          # Check if the keystore file was created successfully
          if [ ! -s keystore.jks ]; then
            echo "Error: Failed to create keystore file. The base64 content might be invalid."
            exit 1
          fi

          # Copy the keystore to the app directory as well (for redundancy)
          mkdir -p app
          cp keystore.jks app/keystore.jks

          # Print the locations for debugging
          echo "Keystore files created at:"
          echo "- $(pwd)/keystore.jks"
          echo "- $(pwd)/app/keystore.jks"

          # Verify the files exist and have content
          ls -la keystore.jks app/keystore.jks

      - name: Update version (if triggered manually)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Extract the current version code and name
          sed -i "s/versionCode = [0-9]*/versionCode = ${{ github.event.inputs.version_code }}/" app/build.gradle.kts
          sed -i "s/versionName = \"[^\"]*\"/versionName = \"${{ github.event.inputs.version_name }}\"/" app/build.gradle.kts

      - name: Debug keystore setup
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Files in app directory:"
          ls -la app/
          echo "Checking keystore files:"
          if [ -f "keystore.jks" ]; then
            echo "Root keystore exists with size: $(stat -c%s keystore.jks) bytes"
          else
            echo "Root keystore does not exist!"
          fi
          if [ -f "app/keystore.jks" ]; then
            echo "App keystore exists with size: $(stat -c%s app/keystore.jks) bytes"
          else
            echo "App keystore does not exist!"
          fi

      - name: Build release APK
        run: |
          # Export environment variables for signing
          export SIGNING_KEY_ALIAS="${{ secrets.SIGNING_KEY_ALIAS }}"
          export SIGNING_KEY_PASSWORD="${{ secrets.SIGNING_KEY_PASSWORD }}"
          export SIGNING_STORE_PASSWORD="${{ secrets.SIGNING_STORE_PASSWORD }}"
          export SIGNING_STORE_FILE="keystore.jks"

          # Run the build with detailed logging
          ./gradlew assembleRelease --info --stacktrace
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_STORE_FILE: keystore.jks

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version_name=${{ github.event.inputs.version_name }}" >> $GITHUB_OUTPUT
            echo "version_code=${{ github.event.inputs.version_code }}" >> $GITHUB_OUTPUT
          else
            VERSION_NAME=$(grep -oP 'versionName = "\K[^"]+' app/build.gradle.kts)
            VERSION_CODE=$(grep -oP 'versionCode = \K[0-9]+' app/build.gradle.kts)
            echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
            echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          fi

      - name: Rename APK
        run: |
          mkdir -p release
          cp app/build/outputs/apk/release/app-release.apk release/pogoauto-${{ steps.version.outputs.version_name }}.apk

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version_name }} (Build ${{ steps.version.outputs.version_code }})
          draft: false
          prerelease: false
          files: |
            release/pogoauto-${{ steps.version.outputs.version_name }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
